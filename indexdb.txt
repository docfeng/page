https://www.jianshu.com/p/d18536b3362f
https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API
https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB
http://www.cnblogs.com/dolphinX/p/3415761.html
https://www.cnblogs.com/dolphinX/p/3416889.html
https://www.ibm.com/developerworks/cn/web/wa-indexeddb/

indexDB主要对象介绍：
IDBFactory：打开数据库的工厂对象，用于打开数据库，并管理数据库版本。
IDBOpenDBRequest：请求对象，对数据库的访问、操作都是基于请求的，通过请求对象获取其他DOM对象。
IDBDatabase：数据库对象，封装了对数据库表的创建、编辑等功能。
IDBObjectStore：类似于数据库的数据表。
IDBIndex：数据库索引对象，用于创建数据表的索引。
IDBTransaction：数据库事物控制对象。
IDBCursor：数据库访问游标，用于访问数据。

注意： indexedDB 对象在旧版本的浏览器上是带有前缀的 (在 Gecko < 16的情况下是 mozIndexedDB 属性，Chrome 中是 webkitIndexedDB ，以及IE10 的 msIndexedDB )。
IDBFactory 提供了对数据库的访问。这是由全局对象 indexedDB 实现的接口，因而也是该 API 的入口。
IDBCursor 遍历对象存储空间和索引。
IDBCursorWithValue 遍历对象存储空间和索引并返回游标的当前值。
IDBDatabase 表示到数据库的连接。只能通过这个连接来拿到一个数据库事务。
IDBEnvironment 提供了到客户端数据库的访问。它由 window 对象实现。
IDBIndex 提供了到索引元数据的访问。
IDBKeyRange 定义键的范围。
IDBObjectStore 表示一个对象存储空间。
IDBOpenDBRequest 表示一个打开数据库的请求。
IDBRequest 提供了到数据库异步请求结果和数据库的访问。这也是在你调用一个异步方法时所得到的。
IDBTransaction 表示一个事务。你在数据库上创建一个事务，指定它的范围（例如你希望访问哪一个对象存储空间），并确定你希望的访问类型（只读或写入）。
IDBVersionChangeEvent 表明数据库的版本号已经改变。

IDBFactory:
var indexDB = window.indexedDB;
IDBFactory对象是用来：打开数据库的工厂对象，用于创建或打开数据库，并管理数据库版本，封装在window对象的indexedDB属性中。

IDBOpenDBRequest与打开删除indexDB数据库:
// open创建或打开一个数据库,返回IDBOpenDBRequest对象
var req = indexDB.open("myIndex", 3); // 第二个参数为版本，版本只能打开最新版本-可选
IDBOpenDBRequest是请求对象，而对数据库的访问、操作都是基于请求的。
既然能进行创建，当然也能删除
indexDB.deleteDatabase('myIndex');

IDBOpenDBRequest与indexDB数据库的调用事件:
在indexDB中有关于数据的调用事件，一个就是onsuccess成功时调用，一个是onerror失败时调用，一个是onupgradeneeded创建和维护数据表及更新ObjectStore，如下：
// 当数据打开失败时调用
req.onerror = function(){
}
// 当数据打开成功时调用
req.onsuccess = function(){
}
// 创建和维护数据表时调用
req.onupgradeneeded = function(){
}
这里我们常用成功的回调函数onsuccess和创建及维护数据回调函数onupgradeneeded，在这两个回调函数中IDBOpenDBRequest对象的result属性中包含本次申请的结果。

IDBOpenDBRequest对象的result属性:
result属性就是IDBDatabase数据库对象，它封装了对数据库表的创建、编辑等功能。
//当数据打开成功时调用
req.onsuccess = function(){
    //在成功后对象的result属性为本次申请的结果
    curDb = req.result; // curDb为数据库对象，用来操作数据表，维护数据表
}
result属性就是IDBDatabase数据库对象，这样我们就可以创建数据库表（ObjectStore）、创建事物对象


IDBDatabase数据库对象的内置函数：
close() ：关闭当前数据库，释放资源。
createObjectStore(“storeName”,paramter)：创建数据库表。
deleteObjectStore(“storeName”)：删除当前数据库表。
transaction(storeNames, “type”)：创建数据库事物管理对象。
IDBDatabase数据库对象的内置属性：
objectStoreNames：数据表名数组。
version ：当前数据库版本。
name ：数据库名。
onabort
onclose
onerror
onversionchange

onupgradeneeded与版本:
onupgradeneeded是创建和维护数据表时调用，在我们使用indexDB.open时，其第二个参数就是版本号的意思，我们在不设置版本号时，第一次打开indexDB时默认会为它添加一个数字1，同时调用onupgradeneeded回调函数，在之后打开则默认使用最新的版本；我们设置版本号时，如果版本号比最新版本低则无法打开indexDB，如果比最新版本高则认为是升级维护，采用最高的版本同时也会触发调用onupgradeneeded回调函数。
// 当第一次创建数据库，或数据库升级时调用的事件
// 在创建或升级时，用来创建或修改数据表
// 只有在onupgradeneeded事件中，才能创建和维护数据表
req.onupgradeneeded = function(){
    //创建表的结构
    var db = req.result;
}
只有在创建或升级时，在onupgradeneeded事件中创建或修改数据表。
那么如何创建表呢？于是我们再次用回IDBDatabase对象的内置函数，其内置函数createObjectStore()，createObjectStore()有两个参数----第一个参数表的名字，第二个参数表的一些配置:
{
    // 两个无法联合使用
    keyPath: '', // 系统唯一标识的id 
    autoIncrement: '' // 由indexdb生成的唯一标识id，指明当前数据id自增长（indexdb），值是ID的名字
}
示例：
req.onupgradeneeded = function(){
    //创建表的结构
    var db = req.result;
    db.createObjectStore("sys_user",{
        //keyPath:,//无法与autoIncrement联合使用，自己设定的id字段的字段名
        autoIncrement:"user_id",//指明当前数据id自增长（indexdb）
    })
}

onsuccess与事物管理对象、数据库表:
创建完表，我们得使用另外的一个对象IDBObjectStore完成数据插入功能，以及IDBTransaction对象来创建事务管理，我们先创建数据库事务管理对象，再通过事务控制对象获取数据表对象来创建数据库表，其中transaction()有两个参数第一个是数组[]里面是表名，第二个参数是读写权限：readonly(只读)、readwrite(读写)，objectStore()值是表名
req.onsuccess = function(){
    //在成功后对象的result属性为本次申请的结果
    curDb = req.result; // curDb为数据库对象，用来操作数据表，维护数据表
    // 先创建数据库事务管理对象
    var tran = curDb.transaction(["sys_user"],"readwrite");
    console.log(tran) // IDBObjectStore
    // 再创建数据库表，通过事务控制对象获取数据表对象
    var objectStore = tran.objectStore("sys_user");
    console.log(objectStore) // IDBObjectStore
}

对象IDBObjectStore类似于数据库的数据表，其拥有一些内置方法可以实现表的增删改查。

IDBObjectStore的内置方法：

add(Obj)：为当前数据表增加记录。参数为JSON类型，同时返回一个IDBRequest对象
clear()：清除数据表。
delete(recordKey)：根据指定的key值删除记录。
get(recordKey)：根据指定的key值获取完整数据。
getAll()：获取当前数据表中所有数据。
count(KeyRange)：清除数据表。
put(obj，key)：根据指定key值修改数据表数据。
使用如下：

req.onsuccess = function(){
    //在成功后对象的result属性为本次申请的结果
    curDb = req.result; // curDb为数据库对象，用来操作数据表，维护数据表
    console.log(curDb)

    // 先创建数据库事务管理对象
    var tran = curDb.transaction(["sys_user"],"readwrite");
    console.log(tran) // IDBObjectStore
    // 再创建数据库表，通过事务控制对象获取数据表对象
    var objectStore = tran.objectStore("sys_user");
    console.log(objectStore) // IDBObjectStore
    
    var user = {
        user_name: '言墨儿',
        sex: '男'
    }
    var adduser = objectStore.add(user); // 为当前数据表增加记录
    console.log(adduser) // IDBRequest
}
案例代码：

<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
    <script>
        // （1）Indexed DB：
        // 索引数据库，操作简便，目前主流浏览器正努力实现对index DB的支持。
        // Web SQL Database实际上已经被废弃，而HTML5的支持的本地存储实际上变成了Web Storage（Local Storage和Session Storage）与IndexedDB。Web Storage使用简单字符串键值对在本地存储数据，方便灵活，但是对于大量结构化数据存储力不从心，IndexedDB是为了能够在客户端存储大量的结构化数据，并且使用索引高效检索的API。
        // （2）indexDB主要对象介绍：
        // •    IDBFactory：打开数据库的工厂对象，用于打开数据库，并管理数据库版本。
        // •    IDBOpenDBRequest：请求对象，对数据库的访问、操作都是基于请求的，通过请求对象获取其他DOM对象。
        // •    IDBDatabase：数据库对象，封装了对数据库表的创建、编辑等功能。
        // •    IDBObjectStore：类似于数据库的数据表。
        // •    IDBIndex：数据库索引对象，用于创建数据表的索引。
        // •    IDBTransaction：数据库事物控制对象。
        // •    IDBCursor：数据库访问游标，用于访问数据。
        // （3）异步API
        // 在IndexedDB大部分操作并不是我们常用的调用方法，返回结果的模式，而是请求——响应的模式，比如打开数据库的操作
        // var request=window.indexedDB.open('testDB');
        // 这条指令并不会返回一个DB对象的句柄，我们得到的是一个IDBOpenDBRequest对象，而我们希望得到的DB对象在其result属性中，
         
        // 这条指令请求的响应是一个 IDBDatabase对象，这就是IndexedDB对象，
         
         
        // 除了result，IDBOpenDBRequest接口定义了几个重要属性
        // •    onerror: 请求失败的回调函数句柄
        // •    onsuccess:请求成功的回调函数句柄
        // •    onupgradeneeded:请求数据库版本变化句柄
         
        // 所谓异步API是指并不是这条指令执行完毕，我们就可以使用request.result来获取indexedDB对象了，就像使用ajax一样，语句执行完并不代表已经获取到了对象，所以我们一般在其回调函数中处理。

    </script>
    <script>
        var indexDB = window.indexedDB;//window.indexedDB获取IDBFactory，打开数据库的工厂对象，用于创建或打开数据库，并管理数据库版本
        console.log(indexDB);
        var curDb = null;
        window.onload = createDB();
        function createDB(){
            //open创建或打开一个数据库,返回request对象
            var req = indexDB.open("myIndex",3);//第二个参数为版本，版本只能打开最新版本
            console.log(req);
            //当数据打开失败时调用
            req.onerror = function(){

            }
            //当数据打开成功时调用
            req.onsuccess = function(){
                //在成功后对象的result属性为本次申请的结果
                curDb = req.result;//curDb为数据库对象，用来操作数据表，维护数据表
                console.log(curDb)

                //1 普通查找提供了get getAll来查询数据
                //get是根据id查询数据
                //getAll是查询全部数据
                //count方法来查找数据的数量
                //2.使用索引查找数据
                var tran = curDb.transaction(["sys_user"],"readwrite");
                console.log(tran)
                var objectStore = tran.objectStore("sys_user");
                console.log(objectStore)
                var user = {
                    user_name: '言墨儿',
                    sex: '男'
                }
                var adduser = objectStore.add(user); // 为当前数据表增加记录
                console.log(adduser)
            }
            //当第一次创建数据库，或数据库升级时调用的事件
            //在创建或升级时，用来创建或修改数据表
            //只有在onupgradeneeded事件中，才能创建和维护数据表
            req.onupgradeneeded = function(){
                //创建表的结构
                var db = req.result;
                console.log(db)
                db.createObjectStore("sys_user",{
                    //keyPath:,//无法与autoIncrement联合使用，自己设定的id字段的字段名
                    autoIncrement:"user_id",//指明当前数据id自增长（indexdb）

                })
            }
        }

        //显示数据数量
        function showCount(objectStore){
            var reque = objectStore.count();//数据库访问方法
            reque.onsuccess = function(){
                var count = event.target.result;

            }
        }
        //显示用户列表
        function showUser(objectStore){
            var request = objectStore.getAllKeys();
            request.onsuccess = function(){
                var keys = event.currentTarget.result;
                for(var i = 0;i < keys.length; i++){
                    var id = key[i];
                    var obj = objectStore;
                    var li = $("<li></li>");
                    li.html(list[i].username);
                    $("#list").append(li);
                }
            }
        }


        function delDB(){
            indexDB.deleteDatabase("myIndex");
        }
        function insertUser(){
            // ObjectStore对象可以完成数据的插入
            // 获取ObjectStore需要的DB对象
            // 用到事务对象

            //获取数据的事务控制
            var tran = curDb.transaction(["sys_user"],"readwrite");
            //通过事务控制对象获取数据表对象
            var objectStore = tran.objectStore("sys_user");
            //增加一条记录，add参数是一个JSON类型
            var user = {
                username:document.getElementById('username').value,
                password:document.getElementById('password').value,
            }
            var addRequest = objectStore.add(user); 
            addRequest.onsuccess = function(){
                alert("创建用户成功");
            }
        }
    </script>
</head>
<body>
    <input type="button" value="创建或打开" onclick="createDB()">
    <input type="button" value="删除" onclick="delDB()">
    <input type="button" value="创建用户" onclick="insertUser()">

    用户名：<input type="text" id="username">
    密码：<input type="password" id="password">
</body>
</html>






