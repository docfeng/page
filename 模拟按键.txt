需要root权限
/**
 * 用root权限执行Linux下的Shell指令
 * 
 * @author jzj
 * @since 2014-09-09
 */
public class RootShellCmd {

	private OutputStream os;

	/**
	 * 执行shell指令
	 * 
	 * @param cmd
	 *            指令
	 */
	public final void exec(String cmd) {
		try {
			if (os == null) {
				os = Runtime.getRuntime().exec("su").getOutputStream();
			}
			os.write(cmd.getBytes());
			os.flush();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 后台模拟全局按键
	 * 
	 * @param keyCode
	 *            键值
	 */
	public final void simulateKey(int keyCode) {
		exec("input keyevent " + keyCode + "\n");
	}
}




2.通过Runtime实现，不需要root权限,但其他app获取不到按键

try  
{  
    String keyCommand = "input keyevent " + KeyEvent.KEYCODE_MENU;  
    Runtime runtime = Runtime.getRuntime();  
    Process proc = runtime.exec(keyCommand);  
}  
catch (IOException e)  
{  
    // TODO Auto-generated catch block  
    e.printStackTrace();  
}

KEYCODE_UNKNOWN=0;   
  
KEYCODE_SOFT_LEFT=1;   
  
KEYCODE_SOFT_RIGHT=2;   
  
KEYCODE_HOME=3;   
  
KEYCODE_BACK=4;   
  
KEYCODE_CALL=5;   
  
KEYCODE_ENDCALL=6;   
  
KEYCODE_0=7;   
  
KEYCODE_1=8;   
  
KEYCODE_2=9;   
  
KEYCODE_3=10;   
  
KEYCODE_4=11;   
  
KEYCODE_5=12;   
  
KEYCODE_6=13;   
  
KEYCODE_7=14;   
  
KEYCODE_8=15;   
  
KEYCODE_9=16;   
  
KEYCODE_STAR=17;   
  
KEYCODE_POUND=18;   
  
KEYCODE_DPAD_UP=19;   
  
KEYCODE_DPAD_DOWN=20;   
  
KEYCODE_DPAD_LEFT=21;   
  
KEYCODE_DPAD_RIGHT=22;   
  
KEYCODE_DPAD_CENTER=23;   
  
KEYCODE_VOLUME_UP=24;   
  
KEYCODE_VOLUME_DOWN=25;   
  
KEYCODE_POWER=26;   
  
KEYCODE_CAMERA=27;   
  
KEYCODE_CLEAR=28;   
  
KEYCODE_A=29;   
  
KEYCODE_B=30;   
  
KEYCODE_C=31;   
  
KEYCODE_D=32;   
  
KEYCODE_E=33;   
  
KEYCODE_F=34;   
  
KEYCODE_G=35;   
  
KEYCODE_H=36;   
  
KEYCODE_I=37;   
  
KEYCODE_J=38;   
  
KEYCODE_K=39;   
  
KEYCODE_L=40;   
  
KEYCODE_M=41;   
  
KEYCODE_N=42;   
  
KEYCODE_O=43;   
  
KEYCODE_P=44;   
  
KEYCODE_Q=45;   
  
KEYCODE_R=46;   
  
KEYCODE_S=47;   
  
KEYCODE_T=48;   
  
KEYCODE_U=49;   
  
KEYCODE_V=50;   
  
KEYCODE_W=51;   
  
KEYCODE_X=52;   
  
KEYCODE_Y=53;   
  
KEYCODE_Z=54;   
  
KEYCODE_COMMA=55;   
  
KEYCODE_PERIOD=56;   
  
KEYCODE_ALT_LEFT=57;   
  
KEYCODE_ALT_RIGHT=58;   
  
KEYCODE_SHIFT_LEFT=59;   
  
KEYCODE_SHIFT_RIGHT=60;   
  
KEYCODE_TAB=61;   
  
KEYCODE_SPACE=62;   
  
KEYCODE_SYM=63;   
  
KEYCODE_EXPLORER=64;   
  
KEYCODE_ENVELOPE=65;   
  
KEYCODE_ENTER=66;   
  
KEYCODE_DEL=67;   
  
KEYCODE_GRAVE=68;   
  
KEYCODE_MINUS=69;   
  
KEYCODE_EQUALS=70;   
  
KEYCODE_LEFT_BRACKET=71;   
  
KEYCODE_RIGHT_BRACKET=72;   
  
KEYCODE_BACKSLASH=73;   
  
KEYCODE_SEMICOLON=74;   
  
KEYCODE_APOSTROPHE=75;   
  
KEYCODE_SLASH=76;   
  
KEYCODE_AT=77;   
  
KEYCODE_NUM=78;   
  
KEYCODE_HEADSETHOOK=79;   
  
KEYCODE_FOCUS=80;//*Camera*focus   
  
KEYCODE_PLUS=81;   
  
KEYCODE_MENU=82;   
  
KEYCODE_NOTIFICATION=83;   
  
KEYCODE_SEARCH=84;   
  
KEYCODE_MEDIA_PLAY_PAUSE=85;   
  
KEYCODE_MEDIA_STOP=86;   
  
KEYCODE_MEDIA_NEXT=87;   
  
KEYCODE_MEDIA_PREVIOUS=88;   
  
KEYCODE_MEDIA_REWIND=89;   
  
KEYCODE_MEDIA_FAST_FORWARD=90;   
  
KEYCODE_MUTE=91;






3./**
 * 传入需要的键值即可
 * @param keyCode
 */
 private void sendKeyCode(final int keyCode){
 new Thread () {
 public void run() {
 try {
 Instrumentation inst = new  Instrumentation();
 inst.sendKeyDownUpSync(keyCode);
 } catch (Exception e) {
 Log.e("Exception when sendPointerSync", e.toString());
 }
 }
 }.start();
 }
　}
　
加入权限：
<uses-permission android:name="android.permission.INJECT_EVENTS" />




4.Android 无障碍辅助功能AccessibilityService

<service android:name=".MyAccessibilityService" 
android:label="@string/accessibility_service_label"> 
<intent-filter> 
<action android:name="android.accessibilityservice.AccessibilityService" /> 
</intent-filter> 
</service> 
<uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE" />


获取UI元素

在onAccessibilityEvent中，使用参数event的getSource方法获取到的AccessibilityNodeInfo实例，即为触发这次事件的UI节点。获取到当前界面UITree的根节点可以使用findAccessibilityNodeInfosByText或者findAccessibilityNodeInfosByViewId方法。需要注意findAccessibilityNodeInfosByText在获取UI元素时的判断逻辑是包含而非等于。
示例代码如：
Listnodes = event.getSource().findAccessibilityNodeInfosByText("立即安装");
Listnodes = event.getSource().findAccessibilityNodeInfosByViewId("txt_1");
模拟用户操作

模拟点击

获取界面上UI元素之后，可根据元素是否可响应操作进行相应的处理。例如，如果UI元素是一个有效的按钮，则可以使用下面的代码来进行模拟点击：
nodeInfo.performAction(AccessibilityNodeInfo.ACTION_CLICK);
同理，如果UI元素是一个有效的列表，则可以使用下面的代码进行模拟滑动：
nodeInfo.performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);
如模拟按下返回键的代码是：
AccessibilityService.performGlobalAction(AccessibilityService.GLOBAL_ACTION_BACK);
模拟打开消息通知栏

在上面介绍accessibilityEventTypes中提到有一个事件: typeNotificationStateChanged，它便是消息通知栏状态发生改变变触发。一些红包外挂工具里头，一有红包就提醒的原理便是在onAccessibilityEvent中监听该事件，然后判断关键字并打开通知，示例关键代码如：
if(event.getEventType() != AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED){
return;
}
Listtexts = event.getText();
if(texts.size() <= 0 || !mAutoTrack) {
return;
}
for(CharSequence text : texts) {
String content = text.toString();
if(!content.contains("[微信红包]")){
continue;
}
if(event.getParcelableData() == null || !(event.getParcelableData() instanceofNotification)) {
continue;
}
Notification notification = (Notification)event.getParcelableData();
PendingIntent pendingIntent =notification.contentIntent;
try{
pendingIntent.send();
}catch (PendingIntent.CanceledException e) {
e.printStackTrace();
}
}
语音播放

首先，定义一个TextToSpeech对象，并在服务连上后进行初始化，示例代码如：
private TextToSpeech mTts;
……
mTts = newTextToSpeech(getApplicationContext(), new TextToSpeech.OnInitListener() {
@Override
public void onInit(int status) {
if (status == TextToSpeech.SUCCESS) {
mTts.setLanguage(Locale.US);
}
}
});
执行语音播放代码：
mTts.speak("hello",TextToSpeech.QUEUE_FLUSH, null);
最后别忘记释放资源：
mTts.shutdown();
建议：
在开发APP想支持语音播功能时，建议在用户界面控件中，通过使用android:contentDescription属性来描控件特性。
对于EditText控件，提供了一个android:hint属性代替了contentDescription属性
判断是否开启辅助功能

intaccessibilityEnabled =Settings.Secure.getInt(context.getApplicationContext().getContentResolver(),android.provider.Settings.Secure.ACCESSIBILITY_ENABLED);
if(accessibilityEnabled == 1) {
String settingValue =Settings.Secure.getString(context.getApplicationContext().getContentResolver(),Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
}
如果手机中开启了一些APP的辅助功能，settingValue的值为：APP1包名/APP1继承AccessibilityService类全名: APP2包名/APP2继承AccessibilityService类全名
使用Dump View Hierarchy for UI Automator解析UI界面视图帮助查找节点对象









